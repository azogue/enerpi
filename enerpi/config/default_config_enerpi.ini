# -*- coding: utf-8 -*-
[ENERPI_DATA]
# Ubicación del catálogo de archivos (HDF Stores) y de generación de imágenes
;DATA_PATH = /home/pi/ENERPIDATA
# Este valor es fijo (consultar 'enerpi --install')
# Usuario para daemon process
# (para evitar problemas de permisos, por defecto se usa www-data, mismo usuario que el servidor web,
# que accede en lectura al catálogo de datos).
# Añadir www-data a gpio para que pueda acceder a los puertos de RPI:
# sudo usermod -a -G gpio www-data
USER_LOGGER = www-data
# Ubicación de la carpeta para PLOTS (debajo de DATA_PATH)
IMG_BASEPATH = PLOTS
# Máscara por defecto para la generación de plots
DEFAULT_IMG_MASK = enerpi_power_consumption_ldr_{:%Y%m%d_%H%M}_{:%Y%m%d_%H%M}.png
# Disk raw data store
HDF_STORE = enerpi_data.h5
# Frecuencia de grabación a disco
N_SAMPLES_BUFFER_DISK = 60
# Frecuencia de archivo de datos
STORE_PERIODIC_CATALOG_SEC = 1800
# Clave a usar en los HDF Stores para almacenar los dataframes.
KEY = /rms
# Logging
LOGGING_LEVEL = DEBUG
FILE_LOGGING = enerpi.log

[ENERPI_WEBSERVER]
# Usuario para webserver
USER_SERVER = www-data
# Ejecuta webserver y scripts de generación de resources para la web (sin usar por ahora!)
WITH_WEBSERVER = True
# Enciende el subsistema de detección y clasificación de patrones,
# para la detección automática de los consumos eléctricos y su procesado
WITH_ML = False
# Subcarpeta de DATA_PATH donde situar 'static'
STATIC_PATH = WWW
# Puerto para flask deployment (ejecución directa de enerpiweb)
FLASK_WEBSERVER_PORT = 7777
# Periodo de ejecución de la generación de plots (rsc) para el webserver (CRON task cada X minutos)
RSC_GEN_EVERY_MINUTES = 5
# Logging
LOGGING_LEVEL_WEB = DEBUG
FILE_LOGGING_WEB = enerpiweb.log
# NGINX Log
;NGINX_LOG =
# UWSGI Log
;NGINX_LOG =
# Others
PREFIX_WEB = /enerpi
BASECOLOR_HEX = 0CBB43
# Serve TILES as png's in same path as svg tiles.
PNG_TILES = False
# Extra info showed in the backend (debug data, timming info, etc...)
EXTRA_INFO = False

[BROADCAST]
# LAN broadcasting
UDP_IP = 192.168.1.255
UDP_PORT = 57775
# Ubicación de la clave de encriptación de los mensajes transmitidos en broadcast cada DELTA_SEC_DATA
# Si no existe, se ofrece generarla (en la 1ª ejecución, o si es eliminada),
# o introducir una existente (leída en otro equipo, CTRL+C _ CTRL+V)
KEY_FILE = .enerpi_secret_key

[RGBLED]
WITH_RGBLED = True
# PINOUT del RGB_LED
PIN_R = 19
PIN_G = 20
PIN_B = 21
# Hora de comienzo para el RGB LED
TIME_ON = 8:00
# Hora de final de funcionamiento para el RGB LED
TIME_OFF = 23:00

## Current meter
[ENERPI_SAMPLER]
# La medición en RMS es necesaria para el valor de Intensidad (estamos midiendo AC!), pero no para el sensor LDR,
# que está midiendo una señal continua de baja variabilidad en los tiempos de muestreo (debes ser ~cte).
# Por la misma razón, no es necesario medir LDR tantas veces como la Intensidad. Para ello el MEASURE_LDR_DIVISOR:
MEASURE_LDR_DIVISOR = 30
# Voltaje típico RMS de la instalación a medir. (SÓLO SE ESTIMA P_ACTIVA!!)
VOLTAJE = 236
# 30 A para 1 V --> Pinza amperométrica SCT030-030
A_REF = 30.
# V, V_ref RPI GPIO
V_REF = 3.3
# Timezone
TZ = Europe/Madrid
# Locale
LOCALE = es_ES.UTF-8
# ∆T de muestreo y archivo, en segundos
DELTA_SEC_DATA = 1
# TS_DATA_MS: Raw sampling en ms. Determina la calidad de la aproximación al valor eficaz (RMS) de la corriente medida.
# En Europa, con el voltaje en 50Hz, un periodo completo de la pseudo-senoidal ocurre cada 20 ms. Sin ánimo,
# ni necesidad, de reconstruir la curva instantánea de corriente, es suficiente con recoger un número de muestras
# en torno a 100 para estimar un buen valor RMS de la corriente con una 'rolling mean' de más de 1 segundo
# (RMS_ROLL_WINDOW_SEC=2), o de más de 200 samples con RMS_ROLL_WINDOW_SEC=1.
# Se puede establecer un TS_DATA_MS = 0 (sin pausas entre lecturas), para maximizar el sampling
# (a costa de elevar demasiado la Tª de una RPI 3 -> ~80 ºC y 100% CPU)
TS_DATA_MS = 1
# ∆T para el deque donde se acumulan los samples y con el que se calcula el valor RMS
RMS_ROLL_WINDOW_SEC = 1
# Entrada en el log para diferenciar el comienzo de diferentes ejecuciones
INIT_LOG_MARK = Init ENERPI logging & broadcasting (testing)...
# Nombres de columna en pd.DataFrames y formato de fecha
COL_TS = ts
FMT_TS = %Y-%m-%d %H:%M:%S.%f

[NOTIFY]
# Default email for reports and notifications. Optional but highly recommended.
EMAIL_RECIPIENT =
# Pushbullet token of the private account for your ENERPI, for sending push notifications. Optional
PUSHBULLET_TOKEN =

[PVPC]
# Información para la facturación del consumo eléctrico en base al PVPC de España. Tarifas: 1|2|3 para: 2.0A|2.0DHA|2.0DHS
TARIFA = 1
# Zona a efectos de impuestos: 1|2|3 para Península y Baleares IVA|Canarias IGIC|Ceuta y Melilla IPSI, respectivamente
ZONA_IMPUESTOS = 1
# Potencia contratada, en kW
POTENCIA = 3.45
# Beneficiario del bono social (descuento del 25%)
CON_BONO_SOCIAL = False
# Código CUPS del contador asociado al contrato. A efectos informativos
CUPS = ES0012345678901234DB

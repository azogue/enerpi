[MCP3008]
# Canales de las conexiones analógicas vía MCP3008 en Analog PIZero u otro montaje con el MCP3008
CH_PROBE = 4
CH_NOISE = 3
CH_LDR = 7
CH_VREF = 0

[RGBLED]
# PINOUT RGB_LED
PIN_R = 19
PIN_G = 20
PIN_B = 16

## Current meter
[ENERPI_SAMPLER]
# Voltaje típico RMS de la instalación a medir. (SÓLO SE ESTIMA P_ACTIVA!!)
VOLTAJE = 236
# 30 A para 1 V --> Pinza amperométrica SCT030-030
A_REF = 30.
# V, V_ref RPI GPIO
V_REF = 3.3
# Timezone
TZ = Europe/Madrid
# ∆T de muestreo y archivo, en segundos
DELTA_SEC_DATA = 1
# TS_DATA_MS: Raw sampling en ms. Determina la calidad de la aproximación al valor eficaz (RMS) de la corriente medida.
# En Europa, con el voltaje en 50Hz, un periodo completo de la pseudo-senoidal ocurre cada 20 ms. Sin ánimo,
# ni necesidad, de reconstruir la curva instantánea de corriente, es suficiente con recoger un número de muestras
# no superior a 100 para estimar un buen valor RMS de la corriente, sobre todo al calcular el valor medio (M de RMS)
# con una 'rolling mean' de más de 1 segundo (RMS_ROLL_WINDOW_SEC=2).
# Se puede establecer un TS_DATA_MS = 0 (sin pausas entre lecturas), para maximizar el sampling
# (a costa de elevar demasiado la Tª de una RPI 3 -> ~80 ºC y 100% CPU)
TS_DATA_MS = 12
# ∆T para el deque donde se acumulan los samples y con el que se calcula el valor RMS
RMS_ROLL_WINDOW_SEC = 2
# Entrada en el log para diferenciar el comienzo de diferentes ejecuciones
INIT_LOG_MARK = Init ENERPI logging & broadcasting...

# Nombres de columna en pd.DataFrames y formato de fecha
COL_TS = ts
FMT_TS = %Y-%m-%d %H:%M:%S.%f
COLS_DATA = power, noise, ref, ldr

[BROADCAST]
# LAN broadcasting
UDP_IP = 192.168.1.255
UDP_PORT = 57775
# Ubicación de la clave de encriptación de los mensajes transmitidos en broadcast cada DELTA_SEC_DATA
# Si no existe, se ofrece generarla (para la 1ª ejecución) o introducir una existente (leída en otro equipo)
KEY_FILE = /home/pi/.enerpi_secret_key
# En sys.platform == 'darwin' (MacOs):
KEY_FILE_OSX = ~/.enerpi_secret_key


[ENERPI_DATA]
# Ubicación del catálogo de archivos (HDF Stores) y de generación de imágenes
DATA_PATH = /home/pi/ENERPIDATA
IMG_BASEPATH = /home/pi/ENERPIDATA/PLOTS
# En sys.platform == 'darwin' (MacOs):
DATA_PATH_OSX = ~/ENERPIDATA
IMG_BASEPATH_OSX = ~/ENERPIDATA/PLOTS

# Máscara por defecto para la generación de plots
DEFAULT_IMG_MASK = enerpi_power_consumption_ldr_{:%Y%m%d_%H%M}_{:%Y%m%d_%H%M}.png
# Disk raw data store
HDF_STORE = enerpi_data.h5
# Frecuencia de grabación a disco
N_SAMPLES_BUFFER_DISK = 60
# Frecuencia de archivo de datos
STORE_PERIODIC_CATALOG_SEC = 3600
# Clave a usar en los HDF Stores para almacenar los dataframes.
KEY = /rms

# Logging
LOGGING_LEVEL = DEBUG
FILE_LOGGING = enerpi.log

[ENERPI_WEBSERVER]
# Ejecuta webserver y scripts de generación de resources para la web
WITH_WEBSERVER = True
# Enciende el subsistema de detección y clasificación de patrones,
# para la detección automática de los consumos eléctricos y su procesado
WITH_ML = False
STATIC_PATH = /home/pi/ENERPIDATA/WWW
# En sys.platform == 'darwin' (MacOs):
STATIC_PATH_OSX = ~/ENERPIDATA/WWW

# NGINX Log
;NGINX_LOG =

# UWSGI Log
;NGINX_LOG =